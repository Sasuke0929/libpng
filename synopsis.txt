Synopsis, for man pages:

void *far_to_near (png_structp png_ptr,png_voidp ptr,int
check);

png_voidp png_buffered_memcpy (png_structp png_ptr, png_voidp
s1, png_voidp s2, png_uint_32 size);

png_voidp png_buffered_memset (png_structp png_ptr, png_voidp
s1, int value, png_uint_32 size);

void png_build_gamma_table (png_structp png_ptr);

void png_build_grayscale_palette (int bit_depth, png_colorp
palette);

void png_calculate_crc (png_structp png_ptr, png_bytep ptr,
png_size_t length);

void png_check_chunk_name (png_structp png_ptr, png_bytep
chunk_name);

png_size_t png_check_keyword (png_structp png_ptr, png_charp
key, png_charpp new_key);

int png_check_sig (png_bytep sig, int num);

void png_chunk_error (png_structp png_ptr, png_const_charp
error);

void png_chunk_warning (png_structp png_ptr, png_const_charp
message);

void png_combine_row (png_structp png_ptr, png_bytep row, int
mask);

void png_convert_from_struct_tm (png_timep ptime, struct tm FAR
* ttime);

void png_convert_from_time_t (png_timep ptime, time_t ttime);

png_charp png_convert_to_rfc1123) (png_structp png_ptr,
png_timep ptime);

void png_correct_palette (png_structp png_ptr, png_colorp
palette, int num_palette);

int png_crc_error (png_structp png_ptr);

int png_crc_finish (png_structp png_ptr, png_uint_32 skip);

void png_crc_read (png_structp png_ptr, png_bytep buf,
png_size_t length);

png_infop png_create_info_struct) (png_structp png_ptr);

png_structp png_create_read_struct) (png_const_charp
user_png_ver, voidp error_ptr, png_error_ptr error_fn,
png_error_ptr warn_fn);

png_voidp png_create_struct (int type);

png_structp png_create_write_struct) (png_const_charp
user_png_ver, voidp error_ptr, png_error_ptr error_fn,
png_error_ptr warn_fn);

void png_debug_free (png_structp png_ptr, png_voidp ptr);

png_voidp png_debug_malloc (png_structp png_ptr, png_uint_32
size);

void png_destroy_info_struct (png_structp png_ptr, png_infopp
info_ptr_ptr);

void png_destroy_read_struct (png_structpp png_ptr_ptr,
png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);

void png_destroy_struct (png_voidp struct_ptr);

void png_destroy_write_struct (png_structpp png_ptr_ptr,
png_infopp info_ptr_ptr);

void png_do_background (png_row_infop row_info, png_bytep row,
png_color_16p trans_values, png_color_16p background,
png_color_16p background_1, png_bytep gamma_table, png_bytep
gamma_from_1, png_bytep gamma_to_1, png_uint_16pp gamma_16,
png_uint_16pp gamma_16_from_1, png_uint_16pp gamma_16_to_1, int
gamma_shift);

void png_do_bgr (png_row_infop row_info, png_bytep row);

void png_do_chop (png_row_infop row_info, png_bytep row);

void png_do_dither (png_row_infop row_info, png_bytep row,
png_bytep palette_lookup, png_bytep dither_lookup);

void png_do_expand (png_row_infop row_info, png_bytep row,
png_color_16p trans_value);

void png_do_expand_palette (png_row_infop row_info, png_bytep
row, png_colorp palette, png_bytep trans, int num_trans);

void png_do_gamma (png_row_infop row_info, png_bytep row,
png_bytep gamma_table, png_uint_16pp gamma_16_table, int
gamma_shift);

void png_do_gray_to_rgb (png_row_infop row_info, png_bytep
row);

void png_do_invert (png_row_infop row_info, png_bytep row);

void png_do_pack (png_row_infop row_info, png_bytep row,
png_uint_32 bit_depth);

void png_do_packswap (png_row_infop row_info, png_bytep row);

void png_do_read_filler (png_row_infop row_info, png_bytep row,
png_uint_32 filler, png_uint_32 flags);

void png_do_read_interlace (png_row_infop row_info, png_bytep
row, int pass, png_uint_32 transformations);

void png_do_read_invert_alpha (png_row_infop row_info,
png_bytep row);

void png_do_read_swap_alpha (png_row_infop row_info, png_bytep
row);

void png_do_read_transformations (png_structp png_ptr);

void png_do_rgb_to_gray (png_row_infop row_info, png_bytep
row);

void png_do_shift (png_row_infop row_info, png_bytep row,
png_color_8p bit_depth);

void png_do_strip_filler (png_row_infop row_info, png_bytep
row, png_uint_32 flags);

void png_do_swap (png_row_infop row_info, png_bytep row);

void png_do_unpack (png_row_infop row_info, png_bytep row);

void png_do_unshift (png_row_infop row_info, png_bytep row,
png_color_8p sig_bits);

void png_do_write_interlace (png_row_infop row_info, png_bytep
row, int pass);

void png_do_write_invert_alpha (png_row_infop row_info,
png_bytep row);

void png_do_write_swap_alpha (png_row_infop row_info, png_bytep
row);

void png_do_write_transformations (png_structp png_ptr);

void png_error (png_structp png_ptr, png_const_charp error);

void png_flush (png_structp png_ptr);

void png_free (png_structp png_ptr, png_voidp ptr);

png_byte png_get_bit_depth (png_structp png_ptr, png_infop
info_ptr);

png_uint_32 png_get_bKGD (png_structp png_ptr, png_infop
info_ptr, png_color_16p *background);

png_byte png_get_channels (png_structp png_ptr, png_infop
info_ptr);

png_uint_32 png_get_cHRM (png_structp png_ptr, png_infop
info_ptr, double *white_x, double *white_y, double *red_x,
double *red_y, double *green_x, double *green_y, double
*blue_x, double *blue_y);

png_byte png_get_color_type (png_structp png_ptr, png_infop
info_ptr);

png_byte png_get_compression_type (png_structp png_ptr,
png_infop info_ptr);

png_voidp png_get_error_ptr (png_structp png_ptr);

png_byte png_get_filter_type (png_structp png_ptr, png_infop
info_ptr);

png_uint_32 png_get_gAMA (png_structp png_ptr, png_infop
info_ptr, double *file_gamma);

png_uint_32 png_get_hIST (png_structp png_ptr, png_infop
info_ptr, png_uint_16p *hist);

png_uint_32 png_get_image_height (png_structp png_ptr,
png_infop info_ptr);

png_uint_32 png_get_image_width (png_structp png_ptr, png_infop
info_ptr);

png_int_32 png_get_int_32 (png_bytep buf);

png_byte png_get_interlace_type (png_structp png_ptr, png_infop
info_ptr);

png_voidp png_get_io_ptr (png_structp png_ptr);

png_uint_32 png_get_IHDR (png_structp png_ptr, png_infop
info_ptr, png_uint_32 *width, png_uint_32 *height, int
*bit_depth, int *color_type, int *interlace_type, int
*compression_type, int *filter_type);

png_uint_32 png_get_oFFs (png_structp png_ptr, png_infop
info_ptr, png_uint_32 *offset_x, png_uint_32 *offset_y, int
*unit_type);

png_uint_32 png_get_pCAL (png_structp png_ptr, png_infop
info_ptr, png_charp *purpose, png_int_32 *X0, png_int_32 *X1,
int *type, int *nparams, png_charp *units, png_charpp *params);

png_uint_32 png_get_pHYs (png_structp png_ptr, png_infop
info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int
*unit_type);

float png_get_pixel_aspect_ratio (png_structp png_ptr,
png_infop info_ptr);

png_uint_32 png_get_pixels_per_meter (png_structp png_ptr,
png_infop info_ptr);

png_voidp png_get_progressive_ptr (png_structp png_ptr);

png_uint_32 png_get_PLTE (png_structp png_ptr, png_infop
info_ptr, png_colorp *palette, int *num_palette);

png_uint_32 png_get_rowbytes (png_structp png_ptr, png_infop
info_ptr);

png_uint_32 png_get_sBIT (png_structp png_ptr, png_infop
info_ptr, png_color_8p *sig_bit);

png_bytep png_get_signature (png_structp png_ptr, png_infop
info_ptr);

png_uint_32 png_get_sRGB (png_structp png_ptr, png_infop
info_ptr, int *intent);

png_uint_32 png_get_text (png_structp png_ptr, png_infop
info_ptr, png_textp *text_ptr, int *num_text);

png_uint_32 png_get_tIME (png_structp png_ptr, png_infop
info_ptr, png_timep *mod_time);

png_uint_32 png_get_tRNS (png_structp png_ptr, png_infop
info_ptr, png_bytep *trans, int *num_trans, png_color_16p
*trans_values);

png_uint_16 png_get_uint_16 (png_bytep buf);

png_uint_32 png_get_uint_32 (png_bytep buf);

png_uint_32 png_get_valid (png_structp png_ptr, png_infop
info_ptr, png_uint_32 flag);

png_uint_32 png_get_x_offset_microns (png_structp png_ptr,
png_infop info_ptr);

png_uint_32 png_get_x_offset_pixels (png_structp png_ptr,
png_infop info_ptr);

png_uint_32 png_get_y_offset_microns (png_structp png_ptr,
png_infop info_ptr);

png_uint_32 png_get_y_offset_pixels (png_structp png_ptr,
png_infop info_ptr);

void png_handle_bKGD (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_cHRM (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_gAMA (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_hIST (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_IEND (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_IHDR (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_oFFs (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_pCAL (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_pHYs (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_PLTE (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_sBIT (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_sRGB (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_tEXt (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_tIME (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_tRNS (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_handle_unknown (png_structp png_ptr, png_infop
info_ptr, png_uint_32 length);

void png_handle_zTXt (png_structp png_ptr, png_infop info_ptr,
png_uint_32 length);

void png_info_destroy (png_structp png_ptr, png_infop
info_ptr);

void png_info_init (png_infop info_ptr);

void png_init_io (png_structp png_ptr, FILE *fp);

void png_init_read_transformations (png_structp png_ptr);

png_voidp png_malloc (png_structp png_ptr, png_uint_32 size);

void png_process_data (png_structp png_ptr, png_infop info_ptr,
png_bytep buffer, png_size_t buffer_size);

void png_process_IDAT_data (png_structp png_ptr, png_bytep
buffer, png_size_t buffer_length);

void png_process_some_data (png_structp png_ptr, png_infop
info_ptr);

void png_progressive_combine_row (png_structp png_ptr,
png_bytep old_row, png_bytep new_row);

void png_push_check_crc (png_structp png_ptr);

void png_push_crc_finish (png_structp png_ptr);

void png_push_crc_skip (png_structp png_ptr, png_uint_32
length);

void png_push_fill_buffer (png_structp png_ptr, png_bytep
buffer, png_size_t length);

void png_push_handle_tEXt (png_structp png_ptr, png_infop
info_ptr, png_uint_32 length);

void png_push_handle_unknown (png_structp png_ptr, png_infop
info_ptr, png_uint_32 length);

void png_push_handle_zTXt (png_structp png_ptr, png_infop
info_ptr, png_uint_32 length);

void png_push_have_end (png_structp png_ptr, png_infop
info_ptr);

void png_push_have_info (png_structp png_ptr, png_infop
info_ptr);

void png_push_have_row (png_structp png_ptr, png_bytep row);

void png_push_process_row (png_structp png_ptr);

void png_push_read_chunk (png_structp png_ptr, png_infop
info_ptr);

void png_push_read_end (png_structp png_ptr, png_infop
info_ptr);

void png_push_read_IDAT (png_structp png_ptr);

void png_push_read_sig (png_structp png_ptr, png_infop
info_ptr);

void png_push_read_tEXt (png_structp png_ptr, png_infop
info_ptr);

void png_push_read_zTXt (png_structp png_ptr, png_infop
info_ptr);

void png_push_restore_buffer (png_structp png_ptr, png_bytep
buffer, png_size_t buffer_length);

void png_push_save_buffer (png_structp png_ptr);

void png_read_data (png_structp png_ptr, png_bytep data,
png_size_t length);

void png_read_destroy (png_structp png_ptr, png_infop info_ptr,
png_infop end_info_ptr);

void png_read_end (png_structp png_ptr, png_infop info_ptr);

void png_read_filter_row (png_structp png_ptr, png_row_infop
row_info, png_bytep row, png_bytep prev_row, int filter);

void png_read_finish_row (png_structp png_ptr);

void png_read_image (png_structp png_ptr, png_bytepp image);

void png_read_info (png_structp png_ptr, png_infop info_ptr);

void png_read_init (png_structp png_ptr);

void png_read_push_finish_row (png_structp png_ptr);

void png_read_row (png_structp png_ptr, png_bytep row,
png_bytep display_row);

void png_read_rows (png_structp png_ptr, png_bytepp row,
png_bytepp display_row, png_uint_32 num_rows);

void png_read_start_row (png_structp png_ptr);

void png_read_transform_info (png_structp png_ptr, png_infop
info_ptr);

void png_read_update_info (png_structp png_ptr, png_infop
info_ptr);

void png_reset_crc (png_structp png_ptr);

void png_save_int_32 (png_bytep buf, png_int_32 i);

void png_save_uint_16 (png_bytep buf, unsigned int i);

void png_save_uint_32 (png_bytep buf, png_uint_32 i);

void png_set_background (png_structp png_ptr, png_color_16p
background_color, int background_gamma_code, int need_expand,
double background_gamma);

void png_set_bgr (png_structp png_ptr);

void png_set_bKGD (png_structp png_ptr, png_infop info_ptr,
png_color_16p background);

void png_set_cHRM (png_structp png_ptr, png_infop info_ptr,
double white_x, double white_y, double red_x, double red_y,
double green_x, double green_y, double blue_x, double blue_y);

void png_set_compression_level (png_structp png_ptr, int
level);

void png_set_compression_mem_level) (png_structp png_ptr, int
mem_level);

void png_set_compression_method (png_structp png_ptr, int
method);

void png_set_compression_strategy) (png_structp png_ptr, int
strategy);

void png_set_compression_window_bits) (png_structp png_ptr, int
window_bits);

void png_set_crc_action (png_structp png_ptr, int crit_action,
int ancil_action);

void png_set_dither (png_structp png_ptr, png_colorp palette,
int num_palette, int maximum_colors, png_uint_16p histogram,
int full_dither);

void png_set_error_fn (png_structp png_ptr, png_voidp
error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn);

void png_set_expand (png_structp png_ptr);

void png_set_filler (png_structp png_ptr, png_uint_32 filler,
int flags);

void png_set_filter (png_structp png_ptr, int method, int
filters);

void png_set_filter_heuristics (png_structp png_ptr, int
heuristic_method, int num_weights, png_doublep filter_weights,
png_doublep filter_costs);

void png_set_flush (png_structp png_ptr, int nrows);

void png_set_gamma (png_structp png_ptr, double screen_gamma,
double default_file_gamma);

void png_set_gAMA (png_structp png_ptr, png_infop info_ptr,
double file_gamma);

void png_set_gray_to_rgb (png_structp png_ptr);

void png_set_hIST (png_structp png_ptr, png_infop info_ptr,
png_uint_16p hist);

int png_set_interlace_handling (png_structp png_ptr);

void png_set_invert_alpha (png_structp png_ptr);

void png_set_invert_mono (png_structp png_ptr);

void png_set_IHDR (png_structp png_ptr, png_infop info_ptr,
png_uint_32 width, png_uint_32 height, int bit_depth, int
color_type, int interlace_type, int compression_type, int
filter_type);

void png_set_oFFs (png_structp png_ptr, png_infop info_ptr,
png_uint_32 offset_x, png_uint_32 offset_y, int unit_type);

void png_set_packing (png_structp png_ptr);

void png_set_packswap (png_structp png_ptr);

void png_set_pCAL (png_structp png_ptr, png_infop info_ptr,
png_charp purpose, png_int_32 X0, png_int_32 X1, int type, int
nparams, png_charp units, png_charpp params);

void png_set_pHYs (png_structp png_ptr, png_infop info_ptr,
png_uint_32 res_x, png_uint_32 res_y, int unit_type);

void png_set_progressive_read_fn (png_structp png_ptr,
png_voidp progressive_ptr, png_progressive_info_ptr info_fn,
png_progressive_row_ptr row_fn, png_progressive_end_ptr
end_fn);

void png_set_PLTE (png_structp png_ptr, png_infop info_ptr,
png_colorp palette, int num_palette);

void png_set_read_fn (png_structp png_ptr, png_voidp io_ptr,
png_rw_ptr read_data_fn);

void png_set_rgb_to_gray (png_structp png_ptr);

void png_set_sBIT (png_structp png_ptr, png_infop info_ptr,
png_color_8p sig_bit);

void png_set_shift (png_structp png_ptr, png_color_8p
true_bits);

void png_set_sig_bytes (png_structp png_ptr, int num_bytes);

void png_set_sRGB (png_structp png_ptr, png_infop info_ptr, int
intent);

void png_set_sRGB_gAMA_and_cHRM (png_structp png_ptr, png_infop
info_ptr, int intent);

void png_set_strip_16 (png_structp png_ptr);

void png_set_strip_alpha (png_structp png_ptr);

void png_set_swap (png_structp png_ptr);

void png_set_swap_alpha (png_structp png_ptr);

void png_set_text (png_structp png_ptr, png_infop info_ptr,
png_textp text_ptr, int num_text);

void png_set_tIME (png_structp png_ptr, png_infop info_ptr,
png_timep mod_time);

void png_set_tRNS (png_structp png_ptr, png_infop info_ptr,
png_bytep trans, int num_trans, png_color_16p trans_values);

void png_set_write_fn (png_structp png_ptr, png_voidp io_ptr,
png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn);

int png_sig_cmp (png_bytep sig, png_size_t start, png_size_t
num_to_check);

void png_start_read_image (png_structp png_ptr);

void png_warning (png_structp png_ptr, png_const_charp
message);

void png_write_bKGD (png_structp png_ptr, png_color_16p values,
int color_type);

void png_write_chunk (png_structp png_ptr, png_bytep
chunk_name, png_bytep data, png_size_t length);

void png_write_chunk_data (png_structp png_ptr, png_bytep data,
png_size_t length);

void png_write_chunk_end (png_structp png_ptr);

void png_write_chunk_start (png_structp png_ptr, png_bytep
chunk_name, png_uint_32 length);

void png_write_cHRM (png_structp png_ptr, double white_x,
double white_y, double red_x, double red_y, double green_x,
double green_y, double blue_x, double blue_y);

void png_write_data (png_structp png_ptr, png_bytep data,
png_size_t length);

void png_write_destroy (png_structp png_ptr);

void png_write_destroy_info (png_infop info_ptr);

void png_write_end (png_structp png_ptr, png_infop info_ptr);

void png_write_filtered_row (png_structp png_ptr, png_bytep
filtered_row);

void png_write_find_filter (png_structp png_ptr, png_row_infop
row_info);

void png_write_finish_row (png_structp png_ptr);

void png_write_flush (png_structp png_ptr);

void png_write_gAMA (png_structp png_ptr, double file_gamma);

void png_write_hIST (png_structp png_ptr, png_uint_16p hist,
int num_hist);

void png_write_image (png_structp png_ptr, png_bytepp image);

void png_write_info (png_structp png_ptr, png_infop info_ptr);

void png_write_init (png_structp png_ptr);

void png_write_IDAT (png_structp png_ptr, png_bytep data,
png_size_t length);

void png_write_IEND (png_structp png_ptr);

void png_write_IHDR (png_structp png_ptr, png_uint_32 width,
png_uint_32 height, int bit_depth, int color_type, int
compression_type, int filter_type, int interlace_type);

void png_write_oFFs (png_structp png_ptr, png_uint_32 x_offset,
png_uint_32 y_offset, int unit_type);

void png_write_pCAL (png_structp png_ptr, png_charp purpose,
png_int_32 X0, png_int_32 X1, int type, int nparams, png_charp
units, png_charpp params);

void png_write_pHYs (png_structp png_ptr, png_uint_32
x_pixels_per_unit, png_uint_32 y_pixels_per_unit, int
unit_type);

void png_write_PLTE (png_structp png_ptr, png_colorp palette,
png_uint_32 num_pal);

void png_write_row (png_structp png_ptr, png_bytep row);

void png_write_rows (png_structp png_ptr, png_bytepp row,
png_uint_32 num_rows);

void png_write_sBIT (png_structp png_ptr, png_color_8p sbit,
int color_type);

void png_write_sig (png_structp png_ptr);

void png_write_sRGB (png_structp png_ptr, int intent);

void png_write_start_row (png_structp png_ptr);

void png_write_tEXt (png_structp png_ptr, png_charp key,
png_charp text, png_size_t text_len);

void png_write_tIME (png_structp png_ptr, png_timep mod_time);

void png_write_tRNS (png_structp png_ptr, png_bytep trans,
png_color_16p values, int number, int color_type);

void png_write_zTXt (png_structp png_ptr, png_charp key,
png_charp text, png_size_t text_len, int compression);

voidpf png_zalloc (voidpf png_ptr, uInt items, uInt size);

void png_zfree (voidpf png_ptr, voidpf ptr);

